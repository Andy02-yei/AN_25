---
title: "Tarea 1"
format: html
editor: visual
---

ALUMNA: ZAMORA PÉREZ ANDREA ANAELI

```{python}
import matplotlib.pyplot as plt
import numpy as np
from scipy import optimize
```


*EJERCICIO 1* 

Consideremos \$f(x)=x^2-5x+6
Un polinomio cuadrático de la forma $f(x)=ax^2+bx+c$ con dos raíces reales distintas.


```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: x ** 2 - 5 * x + 6

x = np.linspace(1, 4, 100)
y = f(x)


# Crear gráfica
plt.figure(figsize=(8,4)) # Tamaño en pulgadas
plt.plot(x,y, color ="teal") 
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()

```

**Aproximaciones para la primera raíz**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f, 1, 2.5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```


Método Newton-Raphson. Hay que brindar la primera derivada $f'(x)= 2x-5$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
f_der = lambda x: 2*x-5
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(f, 1, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(f, x0 = 1, x1= 2.5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

**Comentarios:** El método de bisección es el que tuvo el mayor número de iteraciones. Considero que el mejor método fue el de la secante, no es la que menos iteraciones tuvo pero considero que dio el resultado más preciso.Las tres, se acercan al 2, que sería la primera raíz


```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```


**Aproximaciones para la segunda raíz**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f, 2.5, 3.25, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```


Método Newton-Raphson. Hay que brindar la primera derivada $f'(x)= 2x-5$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
f_der = lambda x: 2* x-5
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(f, 3.25, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(f, x0 = 2.5, x1= 3.25, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

**Comentarios:** En este caso el método de Newton-Raphson fue el más preciso y el que menos iteraciones tuvo. Los otros dos métodos se acercan mucho al resultado, así que los tres son bastante precisos. Vemos que el método de biseccion es el que menos iteraciones tuvo.


```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```





*EJERCICIO 2*

Consideremos \$f(x)=x^3-(6*x^2)+11x-6
Gráfica del polinomio:

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: x**3-(6)*x**2+11*x-6

x = np.linspace(0,4,100)
y = f(x)

# Crear gráfica
plt.figure(figsize=(8,4)) # Tamaño en pulgadas
plt.plot(x,y, color ="royalblue") 
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```

**Aproximaciones para la primera raíz**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f, 0, 1.5, full_output = True) 

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método Newton-Raphson. Hay que brindar la primera derivada \$f'(x)= 3x^2-12x+11

```{python}
#| code-fold: true

# Se brinda la derivada de la función
f_der = lambda x: 3* x**2 - 12*x +11
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(f, 1.2, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(f, x0 = 0, x1= 1.5, full_output = True) 

print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")

```

**Comentarios:** El primer método es el que tiene más iteraciones y el que menos es el de Newton-Raphson. Los tres métodos tienen una muy buena prescisión, pero considero que el método de la secante es el que tiene una mejor aproximación.

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```


**Aproximaciones para la segunda raíz**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f, 1.5, 2.25, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método Newton-Raphson. Hay que brindar la primera derivada $f'(x)= 3x^2-12x+11$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
f_der = lambda x: 3* x**2 - 12*x +11
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(f, 2.3, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(f, x0 = 1.5, x1= 2.3, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

**Comentarios:** El método bisección tiene más iteraciones y el que menos es el de Newton-Raphson. Los tres métodos tienen una muy buena prescisión, pero considero que el método de la secante es el que tiene una mejor aproximación.


```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

**Aproximaciones para la tercera raíz**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f, 2.5, 3.25, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```

Método Newton-Raphson. Hay que brindar la primera derivada $f'(x)= 3x^2-12x+11$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
f_der = lambda x: 3* x**2 - 12*x +11
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(f, 3.3, f_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(f, x0 = 2.5, x1= 3.3, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```
```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```
**Comentarios:** El método bisección tiene más iteraciones. Los tres métodos al hacer el redondeo me dan 3, que es el valor de la tercera raíz. Pero por el número de iteraciones y más precision, el método de la secante es una mejor opción



*EJERCICIO 3*

$f(x)= x^2 -2xe^{-x}+e^{-2x}$, para $0\leq x \leq 1$

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: x**2 - 2*x*np.exp(-x) + np.exp(-2*x)

#Crear gráfica
x = np.linspace(-.5, 2, 100)
y = f(x)

plt.figure(figsize=(6,2))
plt.plot(x, y, color="green")
plt.axhline(0, color='gray', linewidth = 0.8, linestyle='--')
plt.axvline(0, color='blue', linewidth = 0.8, linestyle='--')

#Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()

plt.show()
```
**Aproximación de raíz**

Método bisección

```{python}
#| code-fold: true

def bisection(f, a, b, tol=1e-7, max_iter=100):
    if f(a) * f(b) >= 0:
        raise ValueError("La función debe tener diferentes signos en a y b")
    
    for _ in range(max_iter):
        c = (a + b) / 2  # Punto medio
        if abs(f(c)) < tol:  # Si la función en c es suficientemente pequeña
            return c
        if f(c) * f(a) < 0:  # La raíz está en [a, c]
            b = c
        else:  # La raíz está en [c, b]
            a = c
    return (a + b) / 2  # Retorna el punto medio final

# Usamos el método de bisección en el intervalo [0, 1]
try:
    raiz_biseccion = bisection(f, 0, 1)
    print(f"Raíz por bisección: {raiz_biseccion}")
except ValueError as e:
    print(e)

```
#Aquí me marca un error, me pide que los valores tengan diferentes signos, sino me marca error y no corre el código#


Método Newton-Raphson. Hay que brindar la primera derivada $f'(x)= 2xe^(-x)+2x-2e^(-x)-2e^(-2x)$.

```{python}

#| code-fold: true

# Derivada de la función
def f_prime(x):
    return 2 * x - 2 * np.exp(-x) + 2 * x * np.exp(-x) - 2 * np.exp(-2 * x)

def newton_raphson(f, f_prime, x0, tol=1e-7, max_iter=100):
    for _ in range(max_iter):
        x1 = x0 - f(x0) / f_prime(x0)
        if abs(x1 - x0) < tol:
            return x1
        x0 = x1
    return x0

# Usamos el método de Newton-Raphson
raiz_newton = newton_raphson(f, f_prime, 0.5)
print(f"Raíz por Newton-Raphson: {raiz_newton}")
```
Método de la secante
```{python}
#| code-fold: true
def secant(f, x0, x1, tol=1e-7, max_iter=100):
    for _ in range(max_iter):
        x2 = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0))
        if abs(x2 - x1) < tol:
            return x2
        x0, x1 = x1, x2
    return x1

# Usamos el método de la secante
raiz_secante = secant(f, 0, 1)
print(f"Raíz por el método de la secante: {raiz_secante}")
```
**Comentarios:** El método de Newton-Raphson y el de la secante si arrojaron la raíz, entre ambos hay una diferencia de decimles, pero si llegan al mismo resultado al momento de redondear##



*EJERCICIO 4*

$g(x)= e^x-a$ donde $a=1, 3, 5$.

Gráfica de la función

```{python}
#| code-fold: true
#| fig-align: "center"

g1 = lambda x: np.exp(x)-1 
g3 = lambda x: np.exp(x)-3
g5 = lambda x: np.exp(x)-5

x = np.linspace(-0.5, 2, 200)

# Crear gráfica
plt.figure(figsize=(8,5)) # Tamaño en pulgadas
plt.plot(x, g1(x), label = "a=1") 
plt.plot(x, g3(x), label = "a=3")
plt.plot(x, g5(x), label = "a=5")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()
```


**Aproximaciones para la raíz cuando a=1**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(g1, -0.25, 0.5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```


Método Newton-Raphson. Hay que brindar la primera derivada $g'(x)=e^x$.


```{python}
#| code-fold: true

# Se brinda la derivada de la función
g_der = lambda x: np.exp(x)
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(g1, 1, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(g1, x0 = -0.5, x1= 1.5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

**Comentarios:** El método de bisección es el que más iteraciones tiene, el de Newton-Raphson y el de la secante, tienen mucho menos iteraciones que el de bisección. Los tres métodos se aproximaron al resultado, aunque a primera vista los tres podrían parecer diferentes, no hay que olvidar que en los tres casos hay muchos ceros por delante que faltaron en los resultados, así que todos se acercan al 0



```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)
```

**Aproximaciones para la raíz cuando a=3**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(g3, 1, 1.5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```


Método Newton-Raphson. Hay que brindar la primera derivada $g'(x)=e^x$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
g_der = lambda x: np.exp(x)
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(g3, 1, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(g3, x0 = -0.5, x1= 1.5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

**Comentarios:** El que menos iteraciones tuvo fue el método Newton-Raphson y el que más tuvo fue el método de la bisección. Mientras que el primero llevó a cabo 4 iteraciones, el segundo hizo 38, vemos que si es una diferencia considerable. Sin embargo, los tres métodos llegaron al mismo resultado, lo unico que varía son la cantidad de decimales


```{python}
round(root_biseccion,10) == round(root_newton, 10)
```


```{python}
round(root_secante,10) == round(root_newton, 10)

```


**Aproximaciones para la raíz cuando a=5**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(g5, 1.25, 1.75, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")
```


Método Newton-Raphson. Hay que brindar la primera derivada $g'(x)=e^x$.


```{python}
#| code-fold: true

# Se brinda la derivada de la función
g_der = lambda x: np.exp(x)
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(g5, 1.5, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(g5, x0 = -0.5, x1= 2, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

**Comentarios:** Nuevamente el método de bisección es el que tiene más iteraciones. La diferencia de iteraciones entre el método de Newton-Raphson y el de la secante, no es tanta, en este caso el de la secante hizo 5 iteraciones más. El resultado en los tres métodos es el mismo, cambia la cantidad de decimales, pero finalmente es el mismo.


```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)

```

*EJERCICIO 5*

$g(x)= e^x-log(x+1) -b$ donde $b=2, 3, 5$.

Gráfica de la función

```{python}
#| code-fold: true
#| fig-align: "center"

g2 = lambda x: np.exp(x)-np.log(x + 1)-2 
g3 = lambda x: np.exp(x)-np.log(x + 1)-3
g5 = lambda x: np.exp(x)-np.log(x + 1)-5

x = np.linspace(-0.5, 2.5, 200)

# Crear gráfica
plt.figure(figsize=(8,4)) # Tamaño en pulgadas
plt.plot(x, g2(x), label = "b=2") 
plt.plot(x, g3(x), label = "b=3")
plt.plot(x, g5(x), label = "b=5")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()
```

**Aproximaciones para la raíz cuando b=2**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(g2, 0.5, 1.2, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```

Método Newton-Raphson. Hay que brindar la primera derivada $g'(x)=e^x-(1/(x+1))$.


```{python}
#| code-fold: true

# Se brinda la derivada de la función
g_der = lambda x: np.exp(x) - (1 / (x + 1))
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(g2, 0.5, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```
Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(g2, x0 = 0.5, x1= 1.2, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```
**Comentarios:** El método de bisección es el que llevó a cabo más iteraciones, fueron 41 iteraciones en total; mientras que el de Newton-Raphson hizo 6, el de la secante hizo 7. Los tres resultados son los mismos, lo unico que cambia un poco son los decimales.

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)

```



**Aproximaciones para la raíz cuando b=3**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(g3, 1.2, 1.5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```

Método Newton-Raphson.Hay que brindar la primera derivada $g'(x)=e^x-(1/(x+1))$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
g_der = lambda x: np.exp(x) - (1 / (x + 1))
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(g3, 1.2, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(g3, x0 = 1.2, x1= 1.5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```
**Comentarios:** El que menos iteraciones realizó fue el método Newton-Raphson y el que más fue el de bisección. Los 3 métodos nos llevaron al mismo resuktados que era 1.34 aproximadamente.

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)

```

**Aproximaciones para la raíz cuando b=5**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(g5, 1.5, 2, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```

Método Newton-Raphson. Hay que brindar la primera derivada $g'(x)=e^x-(1/(x+1))$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
g_der = lambda x: np.exp(x) - (1 / (x + 1))
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(g5, 1.5, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```

Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(g5, x0 = 1.5, x1= 2, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```
**Comentarios:** Los tres métodos llegaron al mismo resultado, el cual fue 1.79 aproximadamente. En lo que hay una gran diferencia es en el número de iteraciones, pues el método de bisección realiza más

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)

```



*EJERCICIO 6*
$f(x)= \sqrt{x}-sen(x) -c$ donde $c=1,\pi$.

Gráfica de la función

```{python}
#| code-fold: true
#| fig-align: "center"

f1 = lambda x: np.sqrt(x)-np.sin(x)-1 
fpi= lambda x: np.sqrt(x)-np.sin(x)-np.pi 

x = np.linspace(0, 5, 200)

# Crear gráfica
plt.figure(figsize=(8,4)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "c=1") 
plt.plot(x, fpi(x), label = "c=pi")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--")
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--")

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()
```



**Aproximaciones para la raíz cuando c=1**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(f1, 1, 3, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```

Método Newton-Raphson. Hay que brindar la primera derivada $f'(x)=1/(2*sqrt(x))-cos(x)$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
g_der = lambda x: 1 / (2 * np.sqrt(x)) - np.cos(x)
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(f1, 2, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```
Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(f1, x0 = 1, x1= 3, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```

**Comentarios:** El método Newton-Raphson es el que llevó a cabo menos iteraciones y el que más hizo fue el de bisección, con 40. Los tres resultados dan 2.51, lo que cambia un poco son los decimales.

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)

```


**Aproximaciones para la raíz cuando c=pi**

Método bisección.

```{python}
#| code-fold: true

root_biseccion, info_biseccion = optimize.bisect(fpi, 3, 5, full_output = True)

print("Información de la convergencia del método:")
print(info_biseccion)
print("------------------------------------")
print(f"La raíz de la función es: {root_biseccion}")

```

Método Newton-Raphson. Hay que brindar la primera derivada $f'(x)=1/(2*sqrt(x))-cos(x)$.

```{python}
#| code-fold: true

# Se brinda la derivada de la función
g_der = lambda x: 1 / (2 * np.sqrt(x)) - np.cos(x)
# Se aplica el método de Newton-Raphson
root_newton, info_newton = optimize.newton(fpi, 4, g_der, full_output = True)


print("Información de la convergencia del método de Newton-Raphson:")
print(info_newton)
print("------------------------------------")
print(f"La raíz de la función es: {root_newton}")
```
Método de la secante

```{python}
#| code-fold: true

# Se aplica el método de la secante
root_secante, info_secante = optimize.newton(fpi, x0 = 3, x1= 5, full_output = True)


print("Información de la convergencia del método de la secante:")
print(info_secante)
print("------------------------------------")
print(f"La raíz de la función es: {root_secante}")
```
**Comentarios:** Los 3 métodos llegaron al mismo resultado, a 4.6 aproximadamente. El que más tuvo iteraciones fue el método de bisección. Los otros dos tuvieron pocas iteraciones.

```{python}
round(root_biseccion,10) == round(root_newton, 10)
```

```{python}
round(root_secante,10) == round(root_newton, 10)

```


*EJERCICIO 7*
El sistema de ecuaciones no lineales:

\begin{eqnarray}
y^2 - x^2 + 4x - 2 &=& 0\\
x^2 +3y^2 - 4 &=& 0\\
\end{eqnarray}

tiene dos soluciones. Realiza una gráfica de las curvas de nivel y aproxima las soluciones con la función `fsolve`.

Gráfica de las curvas de nivel.

```{python}
#| code-fold: true
#| fig-align: "center"

#| code-fold: true
#| fig-align: "center"

f1 = lambda x: np.sqrt(x**2 -4*x+2) 
f2 = lambda x: - f1(x)
g1 = lambda x: np.sqrt((-x**2+4)/3)
g2 = lambda x: -g1(x)

x = np.linspace(-2, 2, 500)

# Crear gráfica
plt.figure(figsize=(8,5)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")
plt.plot(x, g2(x), label = "g2")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()
```

Aproximamos la solución del sistema (los puntos de intersección de las curvas de nivel)

```{python}
#| code-fold: true

def sistema(variables): # variables debe ser una lista de dos elementos
  x, y = variables
  return [y ** 2 - x ** 2 + 4*x -2, x**2+3* y ** 2 -4]

solucion_1 = optimize.fsolve(sistema, x0=[0.5,1])
solucion_2 = optimize.fsolve(sistema, x0=[0.5,-1])
print(f"Las soluciones del sistema son: ({round(solucion_1[0], 4)}, {round(solucion_1[1], 4)}) y ({round(solucion_2[0], 4)}, {round(solucion_2[1], 4)})")
```

```{python}
#| code-fold: true
#| fig-align: "center"

# Crear gráfica
plt.figure(figsize=(8,5)) # Tamaño en pulgadas
plt.plot(x, f1(x), label = "f1") 
plt.plot(x, f2(x), label = "f2")
plt.plot(x, g1(x), label = "g1")
plt.plot(x, g2(x), label = "g2")
plt.plot(solucion_1[0], solucion_1[1], marker = 'o', ms=8, color= "darkorange")
plt.plot(solucion_2[0], solucion_2[1], marker = 'o', ms=8, color= "darkorange")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle = "--") #Eje x

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.grid()
plt.legend()

plt.show()
```



*EJERCICIO 8*
Considera el siguiente sistema:
\begin{eqnarray}
sen(x) + y^2 - 1 &=& 0\\
x + cos(y) - 1 &=& 0\\
\end{eqnarray}

Realiza una gráfica de las curvas de nivel y aproxima la solución con la función `fsolve`.

```{python}
#| code-fold: true
 
f_1 = lambda x: np.sqrt(1-np.sin(x))  
f_2 = lambda x: -f_1(x)                  
g_1 = lambda x: 1-np.cos(x)
g_2 = lambda x: 1-g_1(x)

x = np.linspace(-2 * np.pi, 2 * np.pi, 100)  # Rango de x

# Crear gráfica de las curvas de nivel
plt.figure(figsize=(8, 4))  # Tamaño en pulgadas
plt.plot(x, f_1(x), label="f_1") 
plt.plot(x, f_2(x), label="f_2")
plt.plot(x, g_1(x), label="g_1")
plt.plot(x, g_2(x), label="g_2")
plt.axhline(0, color="black", linewidth=0.8, linestyle="--")  # Eje x
plt.axvline(0, color="black", linewidth=0.8, linestyle="--")  # Eje y

# Aproximar la solución del sistema
def sistema(variables):  # variables debe ser una lista de dos elementos
    x, y = variables
    return [np.sin(x) + y**2 - 1, x + np.cos(y) - 1]

solucion_1_1 = optimize.fsolve(sistema, x0=[0, 1])
solucion_2_2 = optimize.fsolve(sistema, x0=[0, -1])

plt.plot(solucion_1_1[0], solucion_1_1[1], marker='o', ms=8, color="darkorange", label='Solución 1')
plt.plot(solucion_2_2[0], solucion_2_2[1], marker='o', ms=8, color="darkorange", label='Solución 2')

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.title("Curvas de nivel y soluciones del sistema de ecuaciones")
plt.xlim(-2 * np.pi, 2 * np.pi)
plt.ylim(-2, 2)
plt.grid()

# Mover la leyenda a la esquina superior izquierda
plt.legend(loc='upper left')

# Mostrar la gráfica
plt.show()

# Imprimir las soluciones
print(f"Las soluciones del sistema son: ({solucion_1_1[0]:.4f}, {solucion_1_1[1]:.4f}) y ({solucion_2_2[0]:.4f}, {solucion_2_2[1]:.4f})")
```




*EJERCICIO 9*

Para el siguiente sistema de ecuaciones no lineal:
\begin{eqnarray}
x^3 + y - 6 &=& 0\\
y^3 -x - 4 &=& 0\\
\end{eqnarray}

Realiza una gráfica de las curvas de nivel y aproxima la solución con la función `fsolve`.


```{python}
#| code-fold: true

f1 = lambda x: 6 - x**3  
f2 = lambda x: (x + 4)**(1/3)  

x = np.linspace(-3, 3, 400)
y1 = f1(x)
y2 = f2(x)

# Crear gráfica de las curvas de nivel
plt.figure(figsize=(8, 5))  # Tamaño en pulgadas
plt.plot(x, y1, label="Curva: $x^3 + y - 6 = 0$", color='blue')
plt.plot(x, y2, label="Curva: $y^3 - x - 4 = 0$", color='red')
plt.axhline(0, color="black", linewidth=0.8, linestyle="--")
plt.axvline(0, color="black", linewidth=0.8, linestyle="--")

# Aproximar la solución del sistema
def sistema(variables):
    x, y = variables
    return [x**3 + y - 6, y**3 - x - 4]

solucion = optimize.fsolve(sistema, x0=[1, 1])

# Graficar la solución encontrada
plt.plot(solucion[0], solucion[1], marker='o', ms=8, color="darkorange", label='Solución')

# Personalizar gráfica
plt.xlabel("x")
plt.ylabel("y")
plt.xlim(-3, 3)
plt.ylim(-3, 3)
plt.grid()
plt.legend(loc='upper left')

plt.show()

# Imprimir la solución
print(f"La solución del sistema es: ({solucion[0]:.4f}, {solucion[1]:.4f})")
```

*EJERCICIO 10*

Consideraremos un sistema de ecuaciones no lineal para describir un modelo de equilibrio económico.

1.  Curva de demanda no lineal
\begin{equation}
q_d = 200 - 10 p^2
\end{equation}

2.  Curva de oferta no lineal
\begin{equation}
q_s = 5 p^3 + 15
\end{equation}

El equilibrio ocurre cuando
\begin{equation}
q_s = q_d
\end{equation}

O bien
\begin{eqnarray}
q + 10p^2 -200  &=& 0\\
q - 5p^3 - 15 &=& 0\\
\end{eqnarray}

Realiza una gráfica de las curvas y aproxima el punto de equilibrio con la función `fsolve`.

```{python}
#| code-fold: true

def demanda(p):
    return 200 - 10 * p**2

def oferta(p):
    return 5 * p**3 + 15

p = np.linspace(0, 5, 400)

q_d = demanda(p)
q_s = oferta(p)

# Crear gráfica de las curvas de demanda y oferta
plt.figure(figsize=(8, 5))  # Tamaño en pulgadas
plt.plot(p, q_d, label="Curva de Demanda", color='lightcoral')
plt.plot(p, q_s, label="Curva de Oferta", color='darkviolet')
plt.axhline(0, color="black", linewidth=0.8, linestyle="--")
plt.axvline(0, color="black", linewidth=0.8, linestyle="--")

# Aproximar el punto de equilibrio
def sistema(variables):
    q, p = variables
    return [q + 10 * p**2 - 200, q - 5 * p**3 - 15]

punto_inicial = [100, 2]
solucion = optimize.fsolve(sistema, x0=punto_inicial)

# Graficar el punto de equilibrio
plt.plot(solucion[1], solucion[0], marker='o', ms=8, color="darkorange", label='Punto de Equilibrio')

# Personalizar gráfica
plt.xlabel("Precio (p)")
plt.ylabel("Cantidad (q)")
plt.title("Curvas de Demanda y Oferta")
plt.xlim(0, 5)
plt.ylim(0, 250)
plt.grid()
plt.legend(loc='upper right')

plt.show()

# Imprimir la solución
print(f"El punto de equilibrio es: Precio (p) = {solucion[1]:.4f}, Cantidad (q) = {solucion[0]:.4f}")
```

